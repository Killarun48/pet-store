// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pet": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "operationId": "3updatePet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                },
                "x-sort": 3
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "operationId": "2addPet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                },
                "x-sort": 2
            }
        },
        "/pet/findByStatus": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Multiple status values can be provided with comma separated strings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "operationId": "4findPetsByStatus",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Status values that need to be considered for filter",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Pet"
                            }
                        }
                    }
                },
                "x-sort": 4
            }
        },
        "/pet/findByTags": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "operationId": "5findPetsByTags",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Tags to filter by",
                        "name": "tags",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Pet"
                            }
                        }
                    }
                },
                "x-sort": 5
            }
        },
        "/pet/{petId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "operationId": "6getPetById",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet to return",
                        "name": "petId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                },
                "x-sort": 6
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "operationId": "7updatePetWithForm",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be updated",
                        "name": "petId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Updated name of the pet",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated status of the pet",
                        "name": "status",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                },
                "x-sort": 7
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "operationId": "8deletePet",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Pet id to delete",
                        "name": "petId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                },
                "x-sort": 8
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "operationId": "1uploadFile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet to update",
                        "name": "petId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional data to pass to server",
                        "name": "additionalMetadata",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                },
                "x-sort": 1
            }
        },
        "/store/inventory": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a map of status codes to quantities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "operationId": "1getInventory",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "operationId": "2placeOrder",
                "parameters": [
                    {
                        "description": "order placed for purchasing the pet",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "description": "For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other values will generated exceptions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "operationId": "3getOrderById",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be fetched",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                }
            },
            "delete": {
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "operationId": "4deleteOrder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be deleted",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "This can only be done by the logged in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "operationId": "8createUser",
                "parameters": [
                    {
                        "description": "Created user object",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "operationId": "7createUsersWithArrayInput",
                "parameters": [
                    {
                        "description": "List of user object",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "operationId": "1createUsersWithListInput",
                "parameters": [
                    {
                        "description": "List of user object",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "operationId": "5loginUser",
                "parameters": [
                    {
                        "type": "string",
                        "default": "admin",
                        "description": "The user name for login",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "admin",
                        "description": "The password for login in clear text",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        },
                        "headers": {
                            "X-Expires-After": {
                                "type": "string",
                                "description": "date in UTC when token expires"
                            },
                            "X-Rate-Limit": {
                                "type": "int",
                                "description": "calls per hour allowed by user"
                            }
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "operationId": "6logoutUser",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "operationId": "2getUserByName",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name that needs to be fetched. Use admin for testing.",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            },
            "put": {
                "description": "This can only be done by the logged in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "operationId": "3updateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name that need to be updated",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user object",
                        "name": "object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This can only be done by the logged in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "operationId": "4deleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name that needs to be deleted",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responder.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 4
                },
                "name": {
                    "type": "string",
                    "example": "rabbit"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "complete": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "petId": {
                    "type": "integer",
                    "example": 1
                },
                "quantity": {
                    "type": "integer",
                    "example": 10
                },
                "shipDate": {
                    "type": "string",
                    "example": "2022-01-01T06:29:51.438Z"
                },
                "status": {
                    "type": "string",
                    "example": "placed"
                }
            }
        },
        "models.Pet": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/models.Category"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Daisy"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "available"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Tag"
                    }
                }
            }
        },
        "models.Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 3
                },
                "name": {
                    "type": "string",
                    "example": "gift"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "wick@continental.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastName": {
                    "type": "string",
                    "example": "Wick"
                },
                "password": {
                    "type": "string",
                    "example": "admin"
                },
                "phone": {
                    "type": "string",
                    "example": "8-999-666-99-66"
                },
                "userStatus": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "responder.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "user deleted"
                },
                "type": {
                    "type": "string",
                    "example": "any"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Everything about your Pets",
            "name": "pet"
        },
        {
            "description": "Access to Petstore orders",
            "name": "store"
        },
        {
            "description": "Operations about users",
            "name": "user"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.7",
	Host:             "localhost:8080",
	BasePath:         "/v2",
	Schemes:          []string{},
	Title:            "Swagger Petstore",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
